"use strict";
import   "824bc590bf0a3702ac7bd27152cb0639:./bundle-manifest";
var $824bc590bf0a3702ac7bd27152cb0639$require$resolve = $824bc590bf0a3702ac7bd27152cb0639$import$8643077138dea1ba$40339995e8a21591;
$824bc590bf0a3702ac7bd27152cb0639$exports = function(fromId, toId) {
    return $824bc590bf0a3702ac7bd27152cb0639$var$relative($824bc590bf0a3702ac7bd27152cb0639$var$dirname($824bc590bf0a3702ac7bd27152cb0639$require$resolve(fromId)), $824bc590bf0a3702ac7bd27152cb0639$require$resolve(toId));
};
function $824bc590bf0a3702ac7bd27152cb0639$var$dirname(_filePath) {
    if (_filePath === '') return '.';
    var filePath = _filePath[_filePath.length - 1] === '/' ? _filePath.slice(0, _filePath.length - 1) : _filePath;
    var slashIndex = filePath.lastIndexOf('/');
    return slashIndex === -1 ? '.' : filePath.slice(0, slashIndex);
}
function $824bc590bf0a3702ac7bd27152cb0639$var$relative(from, to) {
    if (from === to) return '';
    var fromParts = from.split('/');
    if (fromParts[0] === '.') fromParts.shift();
    var toParts = to.split('/');
    if (toParts[0] === '.') toParts.shift();
     // Find where path segments diverge.
    var i;
    var divergeIndex;
    for(i = 0; (i < toParts.length || i < fromParts.length) && divergeIndex == null; i++)if (fromParts[i] !== toParts[i]) divergeIndex = i;
     // If there are segments from "from" beyond the point of divergence,
    // return back up the path to that point using "..".
    var parts = [];
    for(i = 0; i < fromParts.length - divergeIndex; i++)parts.push('..');
     // If there are segments from "to" beyond the point of divergence,
    // continue using the remaining segments.
    if (toParts.length > divergeIndex) parts.push.apply(parts, toParts.slice(divergeIndex));
    return parts.join('/');
}
$824bc590bf0a3702ac7bd27152cb0639$exports._dirname = $824bc590bf0a3702ac7bd27152cb0639$var$dirname;
$824bc590bf0a3702ac7bd27152cb0639$exports._relative = $824bc590bf0a3702ac7bd27152cb0639$var$relative;
