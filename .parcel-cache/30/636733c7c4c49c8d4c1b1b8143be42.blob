// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var $d725c84fc6c0435a026e040b31730ca9$var$R = typeof Reflect === 'object' ? Reflect : null;
var $d725c84fc6c0435a026e040b31730ca9$var$ReflectApply = $d725c84fc6c0435a026e040b31730ca9$var$R && typeof $d725c84fc6c0435a026e040b31730ca9$var$R.apply === 'function' ? $d725c84fc6c0435a026e040b31730ca9$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $d725c84fc6c0435a026e040b31730ca9$var$ReflectOwnKeys;
if ($d725c84fc6c0435a026e040b31730ca9$var$R && typeof $d725c84fc6c0435a026e040b31730ca9$var$R.ownKeys === 'function') $d725c84fc6c0435a026e040b31730ca9$var$ReflectOwnKeys = $d725c84fc6c0435a026e040b31730ca9$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $d725c84fc6c0435a026e040b31730ca9$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $d725c84fc6c0435a026e040b31730ca9$var$ReflectOwnKeys = function ReflectOwnKeys1(target) {
    return Object.getOwnPropertyNames(target);
};
function $d725c84fc6c0435a026e040b31730ca9$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $d725c84fc6c0435a026e040b31730ca9$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $d725c84fc6c0435a026e040b31730ca9$var$EventEmitter() {
    $d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.init.call(this);
}
$d725c84fc6c0435a026e040b31730ca9$exports = $d725c84fc6c0435a026e040b31730ca9$var$EventEmitter;
$d725c84fc6c0435a026e040b31730ca9$exports.once = $d725c84fc6c0435a026e040b31730ca9$var$once;
// Backwards-compat with node 0.10.x
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.EventEmitter = $d725c84fc6c0435a026e040b31730ca9$var$EventEmitter;
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype._events = undefined;
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype._eventsCount = 0;
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $d725c84fc6c0435a026e040b31730ca9$var$defaultMaxListeners = 10;
function $d725c84fc6c0435a026e040b31730ca9$var$checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty($d725c84fc6c0435a026e040b31730ca9$var$EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return $d725c84fc6c0435a026e040b31730ca9$var$defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || $d725c84fc6c0435a026e040b31730ca9$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        $d725c84fc6c0435a026e040b31730ca9$var$defaultMaxListeners = arg;
    }
});
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || $d725c84fc6c0435a026e040b31730ca9$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function $d725c84fc6c0435a026e040b31730ca9$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $d725c84fc6c0435a026e040b31730ca9$var$_getMaxListeners(this);
};
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') $d725c84fc6c0435a026e040b31730ca9$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $d725c84fc6c0435a026e040b31730ca9$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$d725c84fc6c0435a026e040b31730ca9$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $d725c84fc6c0435a026e040b31730ca9$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $d725c84fc6c0435a026e040b31730ca9$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $d725c84fc6c0435a026e040b31730ca9$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $d725c84fc6c0435a026e040b31730ca9$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $d725c84fc6c0435a026e040b31730ca9$var$_addListener(this, type, listener, false);
};
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.on = $d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.addListener;
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $d725c84fc6c0435a026e040b31730ca9$var$_addListener(this, type, listener, true);
};
function $d725c84fc6c0435a026e040b31730ca9$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $d725c84fc6c0435a026e040b31730ca9$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $d725c84fc6c0435a026e040b31730ca9$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.once = function once(type, listener) {
    $d725c84fc6c0435a026e040b31730ca9$var$checkListener(listener);
    this.on(type, $d725c84fc6c0435a026e040b31730ca9$var$_onceWrap(this, type, listener));
    return this;
};
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $d725c84fc6c0435a026e040b31730ca9$var$checkListener(listener);
    this.prependListener(type, $d725c84fc6c0435a026e040b31730ca9$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $d725c84fc6c0435a026e040b31730ca9$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if ((--this._eventsCount) === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $d725c84fc6c0435a026e040b31730ca9$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.off = $d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.removeListener;
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if ((--this._eventsCount) === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $d725c84fc6c0435a026e040b31730ca9$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $d725c84fc6c0435a026e040b31730ca9$var$unwrapListeners(evlistener) : $d725c84fc6c0435a026e040b31730ca9$var$arrayClone(evlistener, evlistener.length);
}
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $d725c84fc6c0435a026e040b31730ca9$var$_listeners(this, type, true);
};
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $d725c84fc6c0435a026e040b31730ca9$var$_listeners(this, type, false);
};
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return $d725c84fc6c0435a026e040b31730ca9$var$listenerCount.call(emitter, type);
};
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.listenerCount = $d725c84fc6c0435a026e040b31730ca9$var$listenerCount;
function $d725c84fc6c0435a026e040b31730ca9$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$d725c84fc6c0435a026e040b31730ca9$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $d725c84fc6c0435a026e040b31730ca9$var$ReflectOwnKeys(this._events) : [];
};
function $d725c84fc6c0435a026e040b31730ca9$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $d725c84fc6c0435a026e040b31730ca9$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $d725c84fc6c0435a026e040b31730ca9$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $d725c84fc6c0435a026e040b31730ca9$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        $d725c84fc6c0435a026e040b31730ca9$var$eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') $d725c84fc6c0435a026e040b31730ca9$var$addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function $d725c84fc6c0435a026e040b31730ca9$var$addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') $d725c84fc6c0435a026e040b31730ca9$var$eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function $d725c84fc6c0435a026e040b31730ca9$var$eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}
