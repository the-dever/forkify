import   "4aa0073e439f2753ed38cc91914ca2f9:../internals/to-object";
var $4aa0073e439f2753ed38cc91914ca2f9$var$floor = Math.floor;
var $4aa0073e439f2753ed38cc91914ca2f9$var$replace = ''.replace;
var $4aa0073e439f2753ed38cc91914ca2f9$var$SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
var $4aa0073e439f2753ed38cc91914ca2f9$var$SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
// `GetSubstitution` abstract operation
// https://tc39.es/ecma262/#sec-getsubstitution
$4aa0073e439f2753ed38cc91914ca2f9$exports = function(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = $4aa0073e439f2753ed38cc91914ca2f9$var$SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
        namedCaptures = $4aa0073e439f2753ed38cc91914ca2f9$import$565dce0892f29b05(namedCaptures);
        symbols = $4aa0073e439f2753ed38cc91914ca2f9$var$SUBSTITUTION_SYMBOLS;
    }
    return $4aa0073e439f2753ed38cc91914ca2f9$var$replace.call(replacement, symbols, function(match, ch) {
        var capture;
        switch(ch.charAt(0)){
            case '$':
                return '$';
            case '&':
                return matched;
            case '`':
                return str.slice(0, position);
            case "'":
                return str.slice(tailPos);
            case '<':
                capture = namedCaptures[ch.slice(1, -1)];
                break;
            default:
                var n = +ch;
                if (n === 0) return match;
                if (n > m) {
                    var f = $4aa0073e439f2753ed38cc91914ca2f9$var$floor(n / 10);
                    if (f === 0) return match;
                    if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                    return match;
                }
                capture = captures[n - 1];
        }
        return capture === undefined ? '' : capture;
    });
};
