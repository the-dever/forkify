// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$eos;
function $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
import   "1e6bc8ffa10e20a2ec2133a16e99f8ef:../../../errors";
var $1e6bc8ffa10e20a2ec2133a16e99f8ef$require$_require$codes = $1e6bc8ffa10e20a2ec2133a16e99f8ef$import$13f352e8cef7114e$dd9ccead5f5c2181;
var $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$ERR_MISSING_ARGS = $1e6bc8ffa10e20a2ec2133a16e99f8ef$require$_require$codes.ERR_MISSING_ARGS, $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$ERR_STREAM_DESTROYED = $1e6bc8ffa10e20a2ec2133a16e99f8ef$require$_require$codes.ERR_STREAM_DESTROYED;
function $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
import   "1e6bc8ffa10e20a2ec2133a16e99f8ef:./end-of-stream";
function $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$destroyer(stream, reading, writing, callback) {
    callback = $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if ($1e6bc8ffa10e20a2ec2133a16e99f8ef$var$eos === undefined) $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$eos = $1e6bc8ffa10e20a2ec2133a16e99f8ef$import$c1d231af56a73eee;
    $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($1e6bc8ffa10e20a2ec2133a16e99f8ef$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$ERR_STREAM_DESTROYED('pipe'));
    };
}
function $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$call(fn) {
    fn();
}
function $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$pipe(from, to) {
    return from.pipe(to);
}
function $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$popCallback(streams) {
    if (!streams.length) return $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$noop;
    if (typeof streams[streams.length - 1] !== 'function') return $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$noop;
    return streams.pop();
}
function $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($1e6bc8ffa10e20a2ec2133a16e99f8ef$var$call);
            if (reading) return;
            destroys.forEach($1e6bc8ffa10e20a2ec2133a16e99f8ef$var$call);
            callback(error);
        });
    });
    return streams.reduce($1e6bc8ffa10e20a2ec2133a16e99f8ef$var$pipe);
}
$1e6bc8ffa10e20a2ec2133a16e99f8ef$exports = $1e6bc8ffa10e20a2ec2133a16e99f8ef$var$pipeline;
