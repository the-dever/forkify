'use strict';
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/object-define-property";
var $affb623d96ecfc0e6662ca83cbcf2890$require$defineProperty = $affb623d96ecfc0e6662ca83cbcf2890$import$4276e2046cfaee3b$ffb27d6bd8d1eb33;
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/object-create";
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/redefine-all";
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/function-bind-context";
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/an-instance";
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/iterate";
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/define-iterator";
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/set-species";
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/descriptors";
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/internal-metadata";
var $affb623d96ecfc0e6662ca83cbcf2890$require$fastKey = $affb623d96ecfc0e6662ca83cbcf2890$import$30f182e50aaa5627$af42a5b8ac888143;
import   "affb623d96ecfc0e6662ca83cbcf2890:../internals/internal-state";
var $affb623d96ecfc0e6662ca83cbcf2890$var$setInternalState = $affb623d96ecfc0e6662ca83cbcf2890$import$2c03d954288482bc$77f8d2fc923b14e3;
var $affb623d96ecfc0e6662ca83cbcf2890$var$internalStateGetterFor = $affb623d96ecfc0e6662ca83cbcf2890$import$2c03d954288482bc$41aa07b58faf19b8;
$affb623d96ecfc0e6662ca83cbcf2890$exports = {
    getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var C = wrapper(function(that, iterable) {
            $affb623d96ecfc0e6662ca83cbcf2890$import$65a2120eaf0c2a0a(that, C, CONSTRUCTOR_NAME);
            $affb623d96ecfc0e6662ca83cbcf2890$var$setInternalState(that, {
                type: CONSTRUCTOR_NAME,
                index: $affb623d96ecfc0e6662ca83cbcf2890$import$d8db146559ed3979(null),
                first: undefined,
                last: undefined,
                size: 0
            });
            if (!$affb623d96ecfc0e6662ca83cbcf2890$import$9e95520c426f46b4) that.size = 0;
            if (iterable != undefined) $affb623d96ecfc0e6662ca83cbcf2890$import$1f57ebca7b213dbf(iterable, that[ADDER], {
                that: that,
                AS_ENTRIES: IS_MAP
            });
        });
        var getInternalState = $affb623d96ecfc0e6662ca83cbcf2890$var$internalStateGetterFor(CONSTRUCTOR_NAME);
        var define = function(that, key, value) {
            var state = getInternalState(that);
            var entry = getEntry(that, key);
            var previous, index;
            // change existing entry
            if (entry) entry.value = value;
            else {
                state.last = entry = {
                    index: index = $affb623d96ecfc0e6662ca83cbcf2890$require$fastKey(key, true),
                    key: key,
                    value: value,
                    previous: previous = state.last,
                    next: undefined,
                    removed: false
                };
                if (!state.first) state.first = entry;
                if (previous) previous.next = entry;
                if ($affb623d96ecfc0e6662ca83cbcf2890$import$9e95520c426f46b4) state.size++;
                else that.size++;
                // add to index
                if (index !== 'F') state.index[index] = entry;
            }
            return that;
        };
        var getEntry = function(that, key) {
            var state = getInternalState(that);
            // fast case
            var index = $affb623d96ecfc0e6662ca83cbcf2890$require$fastKey(key);
            var entry;
            if (index !== 'F') return state.index[index];
            // frozen object case
            for(entry = state.first; entry; entry = entry.next){
                if (entry.key == key) return entry;
            }
        };
        $affb623d96ecfc0e6662ca83cbcf2890$import$ce46ad3e687b31c4(C.prototype, {
            // `{ Map, Set }.prototype.clear()` methods
            // https://tc39.es/ecma262/#sec-map.prototype.clear
            // https://tc39.es/ecma262/#sec-set.prototype.clear
            clear: function clear() {
                var that = this;
                var state = getInternalState(that);
                var data = state.index;
                var entry = state.first;
                while(entry){
                    entry.removed = true;
                    if (entry.previous) entry.previous = entry.previous.next = undefined;
                    delete data[entry.index];
                    entry = entry.next;
                }
                state.first = state.last = undefined;
                if ($affb623d96ecfc0e6662ca83cbcf2890$import$9e95520c426f46b4) state.size = 0;
                else that.size = 0;
            },
            // `{ Map, Set }.prototype.delete(key)` methods
            // https://tc39.es/ecma262/#sec-map.prototype.delete
            // https://tc39.es/ecma262/#sec-set.prototype.delete
            'delete': function(key) {
                var that = this;
                var state = getInternalState(that);
                var entry = getEntry(that, key);
                if (entry) {
                    var next = entry.next;
                    var prev = entry.previous;
                    delete state.index[entry.index];
                    entry.removed = true;
                    if (prev) prev.next = next;
                    if (next) next.previous = prev;
                    if (state.first == entry) state.first = next;
                    if (state.last == entry) state.last = prev;
                    if ($affb623d96ecfc0e6662ca83cbcf2890$import$9e95520c426f46b4) state.size--;
                    else that.size--;
                }
                return !!entry;
            },
            // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
            // https://tc39.es/ecma262/#sec-map.prototype.foreach
            // https://tc39.es/ecma262/#sec-set.prototype.foreach
            forEach: function forEach(callbackfn/* , that = undefined */ ) {
                var state = getInternalState(this);
                var boundFunction = $affb623d96ecfc0e6662ca83cbcf2890$import$66177e0ceb63850c(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
                var entry;
                while(entry = entry ? entry.next : state.first){
                    boundFunction(entry.value, entry.key, this);
                    // revert to the last existing entry
                    while(entry && entry.removed)entry = entry.previous;
                }
            },
            // `{ Map, Set}.prototype.has(key)` methods
            // https://tc39.es/ecma262/#sec-map.prototype.has
            // https://tc39.es/ecma262/#sec-set.prototype.has
            has: function has(key) {
                return !!getEntry(this, key);
            }
        });
        $affb623d96ecfc0e6662ca83cbcf2890$import$ce46ad3e687b31c4(C.prototype, IS_MAP ? {
            // `Map.prototype.get(key)` method
            // https://tc39.es/ecma262/#sec-map.prototype.get
            get: function get(key) {
                var entry = getEntry(this, key);
                return entry && entry.value;
            },
            // `Map.prototype.set(key, value)` method
            // https://tc39.es/ecma262/#sec-map.prototype.set
            set: function set(key, value) {
                return define(this, key === 0 ? 0 : key, value);
            }
        } : {
            // `Set.prototype.add(value)` method
            // https://tc39.es/ecma262/#sec-set.prototype.add
            add: function add(value) {
                return define(this, value = value === 0 ? 0 : value, value);
            }
        });
        if ($affb623d96ecfc0e6662ca83cbcf2890$import$9e95520c426f46b4) $affb623d96ecfc0e6662ca83cbcf2890$require$defineProperty(C.prototype, 'size', {
            get: function() {
                return getInternalState(this).size;
            }
        });
        return C;
    },
    setStrong: function(C, CONSTRUCTOR_NAME, IS_MAP) {
        var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
        var getInternalCollectionState = $affb623d96ecfc0e6662ca83cbcf2890$var$internalStateGetterFor(CONSTRUCTOR_NAME);
        var getInternalIteratorState = $affb623d96ecfc0e6662ca83cbcf2890$var$internalStateGetterFor(ITERATOR_NAME);
        // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
        // https://tc39.es/ecma262/#sec-map.prototype.entries
        // https://tc39.es/ecma262/#sec-map.prototype.keys
        // https://tc39.es/ecma262/#sec-map.prototype.values
        // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
        // https://tc39.es/ecma262/#sec-set.prototype.entries
        // https://tc39.es/ecma262/#sec-set.prototype.keys
        // https://tc39.es/ecma262/#sec-set.prototype.values
        // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
        $affb623d96ecfc0e6662ca83cbcf2890$import$17408e3b717adcbc(C, CONSTRUCTOR_NAME, function(iterated, kind) {
            $affb623d96ecfc0e6662ca83cbcf2890$var$setInternalState(this, {
                type: ITERATOR_NAME,
                target: iterated,
                state: getInternalCollectionState(iterated),
                kind: kind,
                last: undefined
            });
        }, function() {
            var state = getInternalIteratorState(this);
            var kind = state.kind;
            var entry = state.last;
            // revert to the last existing entry
            while(entry && entry.removed)entry = entry.previous;
            // get next entry
            if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
                // or finish the iteration
                state.target = undefined;
                return {
                    value: undefined,
                    done: true
                };
            }
            // return step by kind
            if (kind == 'keys') return {
                value: entry.key,
                done: false
            };
            if (kind == 'values') return {
                value: entry.value,
                done: false
            };
            return {
                value: [
                    entry.key,
                    entry.value
                ],
                done: false
            };
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
        // `{ Map, Set }.prototype[@@species]` accessors
        // https://tc39.es/ecma262/#sec-get-map-@@species
        // https://tc39.es/ecma262/#sec-get-set-@@species
        $affb623d96ecfc0e6662ca83cbcf2890$import$4ab311111214a6d(CONSTRUCTOR_NAME);
    }
};
