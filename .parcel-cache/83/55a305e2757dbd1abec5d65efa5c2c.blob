'use strict';
import   "ef8b6ca453304fffeb7bb08019122237:../internals/fix-regexp-well-known-symbol-logic";
import   "ef8b6ca453304fffeb7bb08019122237:../internals/is-regexp";
import   "ef8b6ca453304fffeb7bb08019122237:../internals/an-object";
import   "ef8b6ca453304fffeb7bb08019122237:../internals/require-object-coercible";
import   "ef8b6ca453304fffeb7bb08019122237:../internals/species-constructor";
import   "ef8b6ca453304fffeb7bb08019122237:../internals/advance-string-index";
import   "ef8b6ca453304fffeb7bb08019122237:../internals/to-length";
import   "ef8b6ca453304fffeb7bb08019122237:../internals/regexp-exec-abstract";
import   "ef8b6ca453304fffeb7bb08019122237:../internals/regexp-exec";
import   "ef8b6ca453304fffeb7bb08019122237:../internals/regexp-sticky-helpers";
var $ef8b6ca453304fffeb7bb08019122237$var$UNSUPPORTED_Y = $ef8b6ca453304fffeb7bb08019122237$import$e9ad70eb59d84ab$f1f96ea44d660c47;
var $ef8b6ca453304fffeb7bb08019122237$var$arrayPush = [].push;
var $ef8b6ca453304fffeb7bb08019122237$var$min = Math.min;
var $ef8b6ca453304fffeb7bb08019122237$var$MAX_UINT32 = 4294967295;
// @@split logic
$ef8b6ca453304fffeb7bb08019122237$import$729254973b5be1b6('split', 2, function(SPLIT, nativeSplit, maybeCallNative) {
    var internalSplit;
    if ('abbc'.split(/(b)*/)[1] == 'c' || // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 || ''.split(/.?/).length) // based on es5-shim implementation, need to rework it
    internalSplit = function(separator, limit) {
        var string = String($ef8b6ca453304fffeb7bb08019122237$import$cb96119f17424999(this));
        var lim = limit === undefined ? $ef8b6ca453304fffeb7bb08019122237$var$MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (separator === undefined) return [
            string
        ];
        // If `separator` is not a regex, use native split
        if (!$ef8b6ca453304fffeb7bb08019122237$import$662e09ba9e21e14(separator)) return nativeSplit.call(string, separator, lim);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;
        while(match = $ef8b6ca453304fffeb7bb08019122237$import$4db0b3069deec4fe$a4b4c796a132eb0a(separatorCopy, string)){
            lastIndex = separatorCopy.lastIndex;
            if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                if (match.length > 1 && match.index < string.length) $ef8b6ca453304fffeb7bb08019122237$var$arrayPush.apply(output, match.slice(1));
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= lim) break;
            }
            if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
        }
        if (lastLastIndex === string.length) {
            if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output.length > lim ? output.slice(0, lim) : output;
    };
    else if ('0'.split(undefined, 0).length) internalSplit = function(separator, limit) {
        return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
    else internalSplit = nativeSplit;
    return [
        // `String.prototype.split` method
        // https://tc39.es/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
            var O = $ef8b6ca453304fffeb7bb08019122237$import$cb96119f17424999(this);
            var splitter = separator == undefined ? undefined : separator[SPLIT];
            return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
        },
        // `RegExp.prototype[@@split]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function(regexp, limit) {
            var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
            if (res.done) return res.value;
            var rx = $ef8b6ca453304fffeb7bb08019122237$import$cad8ba314ee735d6(regexp);
            var S = String(this);
            var C = $ef8b6ca453304fffeb7bb08019122237$import$d2cfec5023aa0b95(rx, RegExp);
            var unicodeMatching = rx.unicode;
            var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + ($ef8b6ca453304fffeb7bb08019122237$var$UNSUPPORTED_Y ? 'g' : 'y');
            // ^(? + rx + ) is needed, in combination with some S slicing, to
            // simulate the 'y' flag.
            var splitter = new C($ef8b6ca453304fffeb7bb08019122237$var$UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
            var lim = limit === undefined ? $ef8b6ca453304fffeb7bb08019122237$var$MAX_UINT32 : limit >>> 0;
            if (lim === 0) return [];
            if (S.length === 0) return $ef8b6ca453304fffeb7bb08019122237$import$e555634ae08e49a3(splitter, S) === null ? [
                S
            ] : [];
            var p = 0;
            var q = 0;
            var A = [];
            while(q < S.length){
                splitter.lastIndex = $ef8b6ca453304fffeb7bb08019122237$var$UNSUPPORTED_Y ? 0 : q;
                var z = $ef8b6ca453304fffeb7bb08019122237$import$e555634ae08e49a3(splitter, $ef8b6ca453304fffeb7bb08019122237$var$UNSUPPORTED_Y ? S.slice(q) : S);
                var e;
                if (z === null || (e = $ef8b6ca453304fffeb7bb08019122237$var$min($ef8b6ca453304fffeb7bb08019122237$import$4102f61a7d1ec5ae(splitter.lastIndex + ($ef8b6ca453304fffeb7bb08019122237$var$UNSUPPORTED_Y ? q : 0)), S.length)) === p) q = $ef8b6ca453304fffeb7bb08019122237$import$a2c472764a5841(S, q, unicodeMatching);
                else {
                    A.push(S.slice(p, q));
                    if (A.length === lim) return A;
                    for(var i = 1; i <= z.length - 1; i++){
                        A.push(z[i]);
                        if (A.length === lim) return A;
                    }
                    q = p = e;
                }
            }
            A.push(S.slice(p));
            return A;
        }
    ];
}, $ef8b6ca453304fffeb7bb08019122237$var$UNSUPPORTED_Y);
