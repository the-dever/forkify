import   "60c28513203bfd038409de950d372ab2:process";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
$60c28513203bfd038409de950d372ab2$exports = $60c28513203bfd038409de950d372ab2$var$Writable;
/* <replacement> */ function $60c28513203bfd038409de950d372ab2$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $60c28513203bfd038409de950d372ab2$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $60c28513203bfd038409de950d372ab2$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $60c28513203bfd038409de950d372ab2$var$Duplex;
/*</replacement>*/ $60c28513203bfd038409de950d372ab2$var$Writable.WritableState = $60c28513203bfd038409de950d372ab2$var$WritableState;
import   "60c28513203bfd038409de950d372ab2:util-deprecate";
/*<replacement>*/ var $60c28513203bfd038409de950d372ab2$var$internalUtil = {
    deprecate: $60c28513203bfd038409de950d372ab2$import$c6510cd05d5331fb
};
import   "60c28513203bfd038409de950d372ab2:./internal/streams/stream";
import   "60c28513203bfd038409de950d372ab2:buffer";
var $60c28513203bfd038409de950d372ab2$require$Buffer = $60c28513203bfd038409de950d372ab2$import$14e1765886db335a$74954538e33d2f49;
var $60c28513203bfd038409de950d372ab2$var$OurUint8Array = $parcel$global.Uint8Array || function() {
};
function $60c28513203bfd038409de950d372ab2$var$_uint8ArrayToBuffer(chunk) {
    return $60c28513203bfd038409de950d372ab2$require$Buffer.from(chunk);
}
function $60c28513203bfd038409de950d372ab2$var$_isUint8Array(obj) {
    return $60c28513203bfd038409de950d372ab2$require$Buffer.isBuffer(obj) || obj instanceof $60c28513203bfd038409de950d372ab2$var$OurUint8Array;
}
import   "60c28513203bfd038409de950d372ab2:./internal/streams/destroy";
import   "60c28513203bfd038409de950d372ab2:./internal/streams/state";
var $60c28513203bfd038409de950d372ab2$var$getHighWaterMark = $60c28513203bfd038409de950d372ab2$import$c945f9023788224b$bbd4a4fd5609c56f;
import   "60c28513203bfd038409de950d372ab2:../errors";
var $60c28513203bfd038409de950d372ab2$require$_require$codes = $60c28513203bfd038409de950d372ab2$import$d31fa337028054c4$dd9ccead5f5c2181;
var $60c28513203bfd038409de950d372ab2$var$ERR_INVALID_ARG_TYPE = $60c28513203bfd038409de950d372ab2$require$_require$codes.ERR_INVALID_ARG_TYPE, $60c28513203bfd038409de950d372ab2$var$ERR_METHOD_NOT_IMPLEMENTED = $60c28513203bfd038409de950d372ab2$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $60c28513203bfd038409de950d372ab2$var$ERR_MULTIPLE_CALLBACK = $60c28513203bfd038409de950d372ab2$require$_require$codes.ERR_MULTIPLE_CALLBACK, $60c28513203bfd038409de950d372ab2$var$ERR_STREAM_CANNOT_PIPE = $60c28513203bfd038409de950d372ab2$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $60c28513203bfd038409de950d372ab2$var$ERR_STREAM_DESTROYED = $60c28513203bfd038409de950d372ab2$require$_require$codes.ERR_STREAM_DESTROYED, $60c28513203bfd038409de950d372ab2$var$ERR_STREAM_NULL_VALUES = $60c28513203bfd038409de950d372ab2$require$_require$codes.ERR_STREAM_NULL_VALUES, $60c28513203bfd038409de950d372ab2$var$ERR_STREAM_WRITE_AFTER_END = $60c28513203bfd038409de950d372ab2$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $60c28513203bfd038409de950d372ab2$var$ERR_UNKNOWN_ENCODING = $60c28513203bfd038409de950d372ab2$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $60c28513203bfd038409de950d372ab2$var$errorOrDestroy = $60c28513203bfd038409de950d372ab2$import$a86d317ea1bd1cea$32f06b1094eae74a;
import   "60c28513203bfd038409de950d372ab2:inherits";
$60c28513203bfd038409de950d372ab2$import$70b005d566dd942e($60c28513203bfd038409de950d372ab2$var$Writable, $60c28513203bfd038409de950d372ab2$import$61a43adec2438b63);
function $60c28513203bfd038409de950d372ab2$var$nop() {
}
import   "60c28513203bfd038409de950d372ab2:./_stream_duplex";
function $60c28513203bfd038409de950d372ab2$var$WritableState(options, stream, isDuplex) {
    $60c28513203bfd038409de950d372ab2$var$Duplex = $60c28513203bfd038409de950d372ab2$var$Duplex || $60c28513203bfd038409de950d372ab2$import$d06935d9d5280e9b;
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $60c28513203bfd038409de950d372ab2$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $60c28513203bfd038409de950d372ab2$var$getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $60c28513203bfd038409de950d372ab2$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $60c28513203bfd038409de950d372ab2$var$CorkedRequest(this);
}
$60c28513203bfd038409de950d372ab2$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($60c28513203bfd038409de950d372ab2$var$WritableState.prototype, 'buffer', {
            get: $60c28513203bfd038409de950d372ab2$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $60c28513203bfd038409de950d372ab2$var$realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    $60c28513203bfd038409de950d372ab2$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($60c28513203bfd038409de950d372ab2$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($60c28513203bfd038409de950d372ab2$var$realHasInstance.call(this, object)) return true;
            if (this !== $60c28513203bfd038409de950d372ab2$var$Writable) return false;
            return object && object._writableState instanceof $60c28513203bfd038409de950d372ab2$var$WritableState;
        }
    });
} else $60c28513203bfd038409de950d372ab2$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
import   "60c28513203bfd038409de950d372ab2:./_stream_duplex";
function $60c28513203bfd038409de950d372ab2$var$Writable(options) {
    $60c28513203bfd038409de950d372ab2$var$Duplex = $60c28513203bfd038409de950d372ab2$var$Duplex || $60c28513203bfd038409de950d372ab2$import$d06935d9d5280e9b; // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $60c28513203bfd038409de950d372ab2$var$Duplex;
    if (!isDuplex && !$60c28513203bfd038409de950d372ab2$var$realHasInstance.call($60c28513203bfd038409de950d372ab2$var$Writable, this)) return new $60c28513203bfd038409de950d372ab2$var$Writable(options);
    this._writableState = new $60c28513203bfd038409de950d372ab2$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    $60c28513203bfd038409de950d372ab2$import$61a43adec2438b63.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$60c28513203bfd038409de950d372ab2$var$Writable.prototype.pipe = function() {
    $60c28513203bfd038409de950d372ab2$var$errorOrDestroy(this, new $60c28513203bfd038409de950d372ab2$var$ERR_STREAM_CANNOT_PIPE());
};
function $60c28513203bfd038409de950d372ab2$var$writeAfterEnd(stream, cb) {
    var er = new $60c28513203bfd038409de950d372ab2$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $60c28513203bfd038409de950d372ab2$var$errorOrDestroy(stream, er);
    $60c28513203bfd038409de950d372ab2$import$9242cb9e284019eb$8a6081d09de61a29(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $60c28513203bfd038409de950d372ab2$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $60c28513203bfd038409de950d372ab2$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new $60c28513203bfd038409de950d372ab2$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        $60c28513203bfd038409de950d372ab2$var$errorOrDestroy(stream, er);
        $60c28513203bfd038409de950d372ab2$import$9242cb9e284019eb$8a6081d09de61a29(cb, er);
        return false;
    }
    return true;
}
$60c28513203bfd038409de950d372ab2$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $60c28513203bfd038409de950d372ab2$var$_isUint8Array(chunk);
    if (isBuf && !$60c28513203bfd038409de950d372ab2$require$Buffer.isBuffer(chunk)) chunk = $60c28513203bfd038409de950d372ab2$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = $60c28513203bfd038409de950d372ab2$var$nop;
    if (state.ending) $60c28513203bfd038409de950d372ab2$var$writeAfterEnd(this, cb);
    else if (isBuf || $60c28513203bfd038409de950d372ab2$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $60c28513203bfd038409de950d372ab2$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$60c28513203bfd038409de950d372ab2$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$60c28513203bfd038409de950d372ab2$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $60c28513203bfd038409de950d372ab2$var$clearBuffer(this, state);
    }
};
$60c28513203bfd038409de950d372ab2$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new $60c28513203bfd038409de950d372ab2$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($60c28513203bfd038409de950d372ab2$var$Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $60c28513203bfd038409de950d372ab2$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = $60c28513203bfd038409de950d372ab2$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($60c28513203bfd038409de950d372ab2$var$Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $60c28513203bfd038409de950d372ab2$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $60c28513203bfd038409de950d372ab2$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $60c28513203bfd038409de950d372ab2$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $60c28513203bfd038409de950d372ab2$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $60c28513203bfd038409de950d372ab2$var$ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $60c28513203bfd038409de950d372ab2$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $60c28513203bfd038409de950d372ab2$import$9242cb9e284019eb$8a6081d09de61a29(cb, er); // this can emit finish, and it will always happen
        // after error
        $60c28513203bfd038409de950d372ab2$import$9242cb9e284019eb$8a6081d09de61a29($60c28513203bfd038409de950d372ab2$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $60c28513203bfd038409de950d372ab2$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $60c28513203bfd038409de950d372ab2$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $60c28513203bfd038409de950d372ab2$var$finishMaybe(stream, state);
    }
}
function $60c28513203bfd038409de950d372ab2$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $60c28513203bfd038409de950d372ab2$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new $60c28513203bfd038409de950d372ab2$var$ERR_MULTIPLE_CALLBACK();
    $60c28513203bfd038409de950d372ab2$var$onwriteStateUpdate(state);
    if (er) $60c28513203bfd038409de950d372ab2$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $60c28513203bfd038409de950d372ab2$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $60c28513203bfd038409de950d372ab2$var$clearBuffer(stream, state);
        if (sync) $60c28513203bfd038409de950d372ab2$import$9242cb9e284019eb$8a6081d09de61a29($60c28513203bfd038409de950d372ab2$var$afterWrite, stream, state, finished, cb);
        else $60c28513203bfd038409de950d372ab2$var$afterWrite(stream, state, finished, cb);
    }
}
function $60c28513203bfd038409de950d372ab2$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $60c28513203bfd038409de950d372ab2$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $60c28513203bfd038409de950d372ab2$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $60c28513203bfd038409de950d372ab2$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function $60c28513203bfd038409de950d372ab2$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $60c28513203bfd038409de950d372ab2$var$doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $60c28513203bfd038409de950d372ab2$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $60c28513203bfd038409de950d372ab2$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$60c28513203bfd038409de950d372ab2$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $60c28513203bfd038409de950d372ab2$var$ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
$60c28513203bfd038409de950d372ab2$var$Writable.prototype._writev = null;
$60c28513203bfd038409de950d372ab2$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $60c28513203bfd038409de950d372ab2$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($60c28513203bfd038409de950d372ab2$var$Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $60c28513203bfd038409de950d372ab2$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $60c28513203bfd038409de950d372ab2$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $60c28513203bfd038409de950d372ab2$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        $60c28513203bfd038409de950d372ab2$var$finishMaybe(stream, state);
    });
}
function $60c28513203bfd038409de950d372ab2$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $60c28513203bfd038409de950d372ab2$import$9242cb9e284019eb$8a6081d09de61a29($60c28513203bfd038409de950d372ab2$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function $60c28513203bfd038409de950d372ab2$var$finishMaybe(stream, state) {
    var need = $60c28513203bfd038409de950d372ab2$var$needFinish(state);
    if (need) {
        $60c28513203bfd038409de950d372ab2$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $60c28513203bfd038409de950d372ab2$var$endWritable(stream, state, cb) {
    state.ending = true;
    $60c28513203bfd038409de950d372ab2$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $60c28513203bfd038409de950d372ab2$import$9242cb9e284019eb$8a6081d09de61a29(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $60c28513203bfd038409de950d372ab2$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($60c28513203bfd038409de950d372ab2$var$Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$60c28513203bfd038409de950d372ab2$var$Writable.prototype.destroy = $60c28513203bfd038409de950d372ab2$import$a86d317ea1bd1cea$fbf9b105a539d6d2;
$60c28513203bfd038409de950d372ab2$var$Writable.prototype._undestroy = $60c28513203bfd038409de950d372ab2$import$a86d317ea1bd1cea$3fd13776a7b3b4d7;
$60c28513203bfd038409de950d372ab2$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};
