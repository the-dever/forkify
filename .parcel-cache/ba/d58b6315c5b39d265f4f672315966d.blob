import   "33d39870832a6ed4beee738c5cfffb8b:process";
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
function $33d39870832a6ed4beee738c5cfffb8b$var$_typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") $33d39870832a6ed4beee738c5cfffb8b$var$_typeof = function _typeof(obj1) {
        return typeof obj1;
    };
    else $33d39870832a6ed4beee738c5cfffb8b$var$_typeof = function _typeof1(obj1) {
        return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
    };
    return $33d39870832a6ed4beee738c5cfffb8b$var$_typeof(obj);
}
function $33d39870832a6ed4beee738c5cfffb8b$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
import   "33d39870832a6ed4beee738c5cfffb8b:./internal/errors";
var $33d39870832a6ed4beee738c5cfffb8b$var$_require$codes = $33d39870832a6ed4beee738c5cfffb8b$import$3a959930921dfb33$dd9ccead5f5c2181, $33d39870832a6ed4beee738c5cfffb8b$var$ERR_AMBIGUOUS_ARGUMENT = $33d39870832a6ed4beee738c5cfffb8b$var$_require$codes.ERR_AMBIGUOUS_ARGUMENT, $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_ARG_TYPE = $33d39870832a6ed4beee738c5cfffb8b$var$_require$codes.ERR_INVALID_ARG_TYPE, $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_ARG_VALUE = $33d39870832a6ed4beee738c5cfffb8b$var$_require$codes.ERR_INVALID_ARG_VALUE, $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_RETURN_VALUE = $33d39870832a6ed4beee738c5cfffb8b$var$_require$codes.ERR_INVALID_RETURN_VALUE, $33d39870832a6ed4beee738c5cfffb8b$var$ERR_MISSING_ARGS = $33d39870832a6ed4beee738c5cfffb8b$var$_require$codes.ERR_MISSING_ARGS;
import   "33d39870832a6ed4beee738c5cfffb8b:./internal/assert/assertion_error";
import   "33d39870832a6ed4beee738c5cfffb8b:util/";
var $33d39870832a6ed4beee738c5cfffb8b$var$inspect = $33d39870832a6ed4beee738c5cfffb8b$import$a8f7a01d0a9212e2$f68a7c3078a08370;
import   "33d39870832a6ed4beee738c5cfffb8b:util/";
var $33d39870832a6ed4beee738c5cfffb8b$require$_require$types = $33d39870832a6ed4beee738c5cfffb8b$import$a8f7a01d0a9212e2$83a93861ea39dce2;
var $33d39870832a6ed4beee738c5cfffb8b$var$isPromise = $33d39870832a6ed4beee738c5cfffb8b$require$_require$types.isPromise, $33d39870832a6ed4beee738c5cfffb8b$var$isRegExp = $33d39870832a6ed4beee738c5cfffb8b$require$_require$types.isRegExp;
import   "33d39870832a6ed4beee738c5cfffb8b:es6-object-assign";
var $33d39870832a6ed4beee738c5cfffb8b$var$objectAssign = Object.assign ? Object.assign : $33d39870832a6ed4beee738c5cfffb8b$import$203b4cbd9813005c$f3c88f5a058bec38;
import   "33d39870832a6ed4beee738c5cfffb8b:object-is";
var $33d39870832a6ed4beee738c5cfffb8b$var$objectIs = Object.is ? Object.is : $33d39870832a6ed4beee738c5cfffb8b$import$6cc712d7c3e424ab;
var $33d39870832a6ed4beee738c5cfffb8b$var$errorCache = new Map();
var $33d39870832a6ed4beee738c5cfffb8b$var$isDeepEqual;
var $33d39870832a6ed4beee738c5cfffb8b$var$isDeepStrictEqual;
var $33d39870832a6ed4beee738c5cfffb8b$var$parseExpressionAt;
var $33d39870832a6ed4beee738c5cfffb8b$var$findNodeAround;
var $33d39870832a6ed4beee738c5cfffb8b$var$decoder;
import   "33d39870832a6ed4beee738c5cfffb8b:./internal/util/comparisons";
function $33d39870832a6ed4beee738c5cfffb8b$var$lazyLoadComparison() {
    var comparison = $33d39870832a6ed4beee738c5cfffb8b$import$9f2a804ea116cd2;
    $33d39870832a6ed4beee738c5cfffb8b$var$isDeepEqual = comparison.isDeepEqual;
    $33d39870832a6ed4beee738c5cfffb8b$var$isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex
var $33d39870832a6ed4beee738c5cfffb8b$var$escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var $33d39870832a6ed4beee738c5cfffb8b$var$meta = [
    "\\u0000",
    "\\u0001",
    "\\u0002",
    "\\u0003",
    "\\u0004",
    "\\u0005",
    "\\u0006",
    "\\u0007",
    '\\b',
    '',
    '',
    "\\u000b",
    '\\f',
    '',
    "\\u000e",
    "\\u000f",
    "\\u0010",
    "\\u0011",
    "\\u0012",
    "\\u0013",
    "\\u0014",
    "\\u0015",
    "\\u0016",
    "\\u0017",
    "\\u0018",
    "\\u0019",
    "\\u001a",
    "\\u001b",
    "\\u001c",
    "\\u001d",
    "\\u001e",
    "\\u001f"
];
var $33d39870832a6ed4beee738c5cfffb8b$var$escapeFn = function escapeFn(str) {
    return $33d39870832a6ed4beee738c5cfffb8b$var$meta[str.charCodeAt(0)];
};
var $33d39870832a6ed4beee738c5cfffb8b$var$warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.
var $33d39870832a6ed4beee738c5cfffb8b$var$assert = $33d39870832a6ed4beee738c5cfffb8b$exports = $33d39870832a6ed4beee738c5cfffb8b$var$ok;
var $33d39870832a6ed4beee738c5cfffb8b$var$NO_EXCEPTION_SENTINEL = {
}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.
function $33d39870832a6ed4beee738c5cfffb8b$var$innerFail(obj) {
    if (obj.message instanceof Error) throw obj.message;
    throw new $33d39870832a6ed4beee738c5cfffb8b$import$364f656b2c35b446(obj);
}
function $33d39870832a6ed4beee738c5cfffb8b$var$fail(actual, expected, message, operator, stackStartFn) {
    var argsLen = arguments.length;
    var internalMessage;
    if (argsLen === 0) internalMessage = 'Failed';
    else if (argsLen === 1) {
        message = actual;
        actual = undefined;
    } else {
        if ($33d39870832a6ed4beee738c5cfffb8b$var$warned === false) {
            $33d39870832a6ed4beee738c5cfffb8b$var$warned = true;
            var warn = $33d39870832a6ed4beee738c5cfffb8b$import$9242cb9e284019eb$921b25b7ef4d1ff2 ? $33d39870832a6ed4beee738c5cfffb8b$import$9242cb9e284019eb$921b25b7ef4d1ff2 : console.warn.bind(console);
            warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", 'DeprecationWarning', 'DEP0094');
        }
        if (argsLen === 2) operator = '!=';
    }
    if (message instanceof Error) throw message;
    var errArgs = {
        actual: actual,
        expected: expected,
        operator: operator === undefined ? 'fail' : operator,
        stackStartFn: stackStartFn || $33d39870832a6ed4beee738c5cfffb8b$var$fail
    };
    if (message !== undefined) errArgs.message = message;
    var err = new $33d39870832a6ed4beee738c5cfffb8b$import$364f656b2c35b446(errArgs);
    if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
    }
    throw err;
}
$33d39870832a6ed4beee738c5cfffb8b$var$assert.fail = $33d39870832a6ed4beee738c5cfffb8b$var$fail; // The AssertionError is defined in internal/error.
$33d39870832a6ed4beee738c5cfffb8b$var$assert.AssertionError = $33d39870832a6ed4beee738c5cfffb8b$import$364f656b2c35b446;
function $33d39870832a6ed4beee738c5cfffb8b$var$innerOk(fn, argLen, value, message) {
    if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
            generatedMessage = true;
            message = 'No value argument passed to `assert.ok()`';
        } else if (message instanceof Error) throw message;
        var err = new $33d39870832a6ed4beee738c5cfffb8b$import$364f656b2c35b446({
            actual: value,
            expected: true,
            message: message,
            operator: '==',
            stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
    }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.
function $33d39870832a6ed4beee738c5cfffb8b$var$ok() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    $33d39870832a6ed4beee738c5cfffb8b$var$innerOk.apply(void 0, [
        $33d39870832a6ed4beee738c5cfffb8b$var$ok,
        args.length
    ].concat(args));
}
$33d39870832a6ed4beee738c5cfffb8b$var$assert.ok = $33d39870832a6ed4beee738c5cfffb8b$var$ok; // The equality assertion tests shallow, coercive equality with ==.
/* eslint-disable no-restricted-properties */ $33d39870832a6ed4beee738c5cfffb8b$var$assert.equal = function equal(actual, expected, message) {
    if (arguments.length < 2) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_MISSING_ARGS('actual', 'expected');
     // eslint-disable-next-line eqeqeq
    if (actual != expected) $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: '==',
        stackStartFn: equal
    });
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.
$33d39870832a6ed4beee738c5cfffb8b$var$assert.notEqual = function notEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_MISSING_ARGS('actual', 'expected');
     // eslint-disable-next-line eqeqeq
    if (actual == expected) $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: '!=',
        stackStartFn: notEqual
    });
}; // The equivalence assertion tests a deep equality relation.
$33d39870832a6ed4beee738c5cfffb8b$var$assert.deepEqual = function deepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($33d39870832a6ed4beee738c5cfffb8b$var$isDeepEqual === undefined) $33d39870832a6ed4beee738c5cfffb8b$var$lazyLoadComparison();
    if (!$33d39870832a6ed4beee738c5cfffb8b$var$isDeepEqual(actual, expected)) $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'deepEqual',
        stackStartFn: deepEqual
    });
}; // The non-equivalence assertion tests for any deep inequality.
$33d39870832a6ed4beee738c5cfffb8b$var$assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($33d39870832a6ed4beee738c5cfffb8b$var$isDeepEqual === undefined) $33d39870832a6ed4beee738c5cfffb8b$var$lazyLoadComparison();
    if ($33d39870832a6ed4beee738c5cfffb8b$var$isDeepEqual(actual, expected)) $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'notDeepEqual',
        stackStartFn: notDeepEqual
    });
};
/* eslint-enable */ $33d39870832a6ed4beee738c5cfffb8b$var$assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($33d39870832a6ed4beee738c5cfffb8b$var$isDeepEqual === undefined) $33d39870832a6ed4beee738c5cfffb8b$var$lazyLoadComparison();
    if (!$33d39870832a6ed4beee738c5cfffb8b$var$isDeepStrictEqual(actual, expected)) $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'deepStrictEqual',
        stackStartFn: deepStrictEqual
    });
};
$33d39870832a6ed4beee738c5cfffb8b$var$assert.notDeepStrictEqual = $33d39870832a6ed4beee738c5cfffb8b$var$notDeepStrictEqual;
function $33d39870832a6ed4beee738c5cfffb8b$var$notDeepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($33d39870832a6ed4beee738c5cfffb8b$var$isDeepEqual === undefined) $33d39870832a6ed4beee738c5cfffb8b$var$lazyLoadComparison();
    if ($33d39870832a6ed4beee738c5cfffb8b$var$isDeepStrictEqual(actual, expected)) $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'notDeepStrictEqual',
        stackStartFn: $33d39870832a6ed4beee738c5cfffb8b$var$notDeepStrictEqual
    });
}
$33d39870832a6ed4beee738c5cfffb8b$var$assert.strictEqual = function strictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_MISSING_ARGS('actual', 'expected');
    if (!$33d39870832a6ed4beee738c5cfffb8b$var$objectIs(actual, expected)) $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'strictEqual',
        stackStartFn: strictEqual
    });
};
$33d39870832a6ed4beee738c5cfffb8b$var$assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($33d39870832a6ed4beee738c5cfffb8b$var$objectIs(actual, expected)) $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'notStrictEqual',
        stackStartFn: notStrictEqual
    });
};
var $33d39870832a6ed4beee738c5cfffb8b$var$Comparison = function Comparison(obj, keys, actual) {
    var _this = this;
    $33d39870832a6ed4beee738c5cfffb8b$var$_classCallCheck(this, Comparison);
    keys.forEach(function(key) {
        if (key in obj) {
            if (actual !== undefined && typeof actual[key] === 'string' && $33d39870832a6ed4beee738c5cfffb8b$var$isRegExp(obj[key]) && obj[key].test(actual[key])) _this[key] = actual[key];
            else _this[key] = obj[key];
        }
    });
};
function $33d39870832a6ed4beee738c5cfffb8b$var$compareExceptionKey(actual, expected, key, message, keys, fn) {
    if (!(key in actual) || !$33d39870832a6ed4beee738c5cfffb8b$var$isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
            // Create placeholder objects to create a nice output.
            var a = new $33d39870832a6ed4beee738c5cfffb8b$var$Comparison(actual, keys);
            var b = new $33d39870832a6ed4beee738c5cfffb8b$var$Comparison(expected, keys, actual);
            var err = new $33d39870832a6ed4beee738c5cfffb8b$import$364f656b2c35b446({
                actual: a,
                expected: b,
                operator: 'deepStrictEqual',
                stackStartFn: fn
            });
            err.actual = actual;
            err.expected = expected;
            err.operator = fn.name;
            throw err;
        }
        $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
            actual: actual,
            expected: expected,
            message: message,
            operator: fn.name,
            stackStartFn: fn
        });
    }
}
function $33d39870832a6ed4beee738c5cfffb8b$var$expectedException(actual, expected, msg, fn) {
    if (typeof expected !== 'function') {
        if ($33d39870832a6ed4beee738c5cfffb8b$var$isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.
        if (arguments.length === 2) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_ARG_TYPE('expected', [
            'Function',
            'RegExp'
        ], expected);
         // Handle primitives properly.
        if ($33d39870832a6ed4beee738c5cfffb8b$var$_typeof(actual) !== 'object' || actual === null) {
            var err = new $33d39870832a6ed4beee738c5cfffb8b$import$364f656b2c35b446({
                actual: actual,
                expected: expected,
                message: msg,
                operator: 'deepStrictEqual',
                stackStartFn: fn
            });
            err.operator = fn.name;
            throw err;
        }
        var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
        // as well.
        if (expected instanceof Error) keys.push('name', 'message');
        else if (keys.length === 0) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
        if ($33d39870832a6ed4beee738c5cfffb8b$var$isDeepEqual === undefined) $33d39870832a6ed4beee738c5cfffb8b$var$lazyLoadComparison();
        keys.forEach(function(key) {
            if (typeof actual[key] === 'string' && $33d39870832a6ed4beee738c5cfffb8b$var$isRegExp(expected[key]) && expected[key].test(actual[key])) return;
            $33d39870832a6ed4beee738c5cfffb8b$var$compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
    } // Guard instanceof against arrow functions as they don't have a prototype.
    if (expected.prototype !== undefined && actual instanceof expected) return true;
    if (Error.isPrototypeOf(expected)) return false;
    return expected.call({
    }, actual) === true;
}
function $33d39870832a6ed4beee738c5cfffb8b$var$getActual(fn) {
    if (typeof fn !== 'function') throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
    try {
        fn();
    } catch (e) {
        return e;
    }
    return $33d39870832a6ed4beee738c5cfffb8b$var$NO_EXCEPTION_SENTINEL;
}
function $33d39870832a6ed4beee738c5cfffb8b$var$checkIsPromise(obj) {
    // Accept native ES6 promises and promises that are implemented in a similar
    // way. Do not accept thenables that use a function as `obj` and that have no
    // `catch` handler.
    // TODO: thenables are checked up until they have the correct methods,
    // but according to documentation, the `then` method should receive
    // the `fulfill` and `reject` arguments as well or it may be never resolved.
    return $33d39870832a6ed4beee738c5cfffb8b$var$isPromise(obj) || obj !== null && $33d39870832a6ed4beee738c5cfffb8b$var$_typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}
function $33d39870832a6ed4beee738c5cfffb8b$var$waitForActual(promiseFn) {
    return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === 'function') {
            // Return a rejected promise if `promiseFn` throws synchronously.
            resultPromise = promiseFn(); // Fail in case no promise is returned.
            if (!$33d39870832a6ed4beee738c5cfffb8b$var$checkIsPromise(resultPromise)) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
        } else if ($33d39870832a6ed4beee738c5cfffb8b$var$checkIsPromise(promiseFn)) resultPromise = promiseFn;
        else throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_ARG_TYPE('promiseFn', [
            'Function',
            'Promise'
        ], promiseFn);
        return Promise.resolve().then(function() {
            return resultPromise;
        }).then(function() {
            return $33d39870832a6ed4beee738c5cfffb8b$var$NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
            return e;
        });
    });
}
function $33d39870832a6ed4beee738c5cfffb8b$var$expectsError(stackStartFn, actual, error, message) {
    if (typeof error === 'string') {
        if (arguments.length === 4) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_ARG_TYPE('error', [
            'Object',
            'Error',
            'Function',
            'RegExp'
        ], error);
        if ($33d39870832a6ed4beee738c5cfffb8b$var$_typeof(actual) === 'object' && actual !== null) {
            if (actual.message === error) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
        } else if (actual === error) throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
        message = error;
        error = undefined;
    } else if (error != null && $33d39870832a6ed4beee738c5cfffb8b$var$_typeof(error) !== 'object' && typeof error !== 'function') throw new $33d39870832a6ed4beee738c5cfffb8b$var$ERR_INVALID_ARG_TYPE('error', [
        'Object',
        'Error',
        'Function',
        'RegExp'
    ], error);
    if (actual === $33d39870832a6ed4beee738c5cfffb8b$var$NO_EXCEPTION_SENTINEL) {
        var details = '';
        if (error && error.name) details += " (".concat(error.name, ")");
        details += message ? ": ".concat(message) : '.';
        var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
        $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
            actual: undefined,
            expected: error,
            operator: stackStartFn.name,
            message: "Missing expected ".concat(fnType).concat(details),
            stackStartFn: stackStartFn
        });
    }
    if (error && !$33d39870832a6ed4beee738c5cfffb8b$var$expectedException(actual, error, message, stackStartFn)) throw actual;
}
function $33d39870832a6ed4beee738c5cfffb8b$var$expectsNoError(stackStartFn, actual, error, message) {
    if (actual === $33d39870832a6ed4beee738c5cfffb8b$var$NO_EXCEPTION_SENTINEL) return;
    if (typeof error === 'string') {
        message = error;
        error = undefined;
    }
    if (!error || $33d39870832a6ed4beee738c5cfffb8b$var$expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : '.';
        var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
        $33d39870832a6ed4beee738c5cfffb8b$var$innerFail({
            actual: actual,
            expected: error,
            operator: stackStartFn.name,
            message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
            stackStartFn: stackStartFn
        });
    }
    throw actual;
}
$33d39870832a6ed4beee738c5cfffb8b$var$assert.throws = function throws(promiseFn) {
    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
    $33d39870832a6ed4beee738c5cfffb8b$var$expectsError.apply(void 0, [
        throws,
        $33d39870832a6ed4beee738c5cfffb8b$var$getActual(promiseFn)
    ].concat(args));
};
$33d39870832a6ed4beee738c5cfffb8b$var$assert.rejects = function rejects(promiseFn) {
    for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)args[_key3 - 1] = arguments[_key3];
    return $33d39870832a6ed4beee738c5cfffb8b$var$waitForActual(promiseFn).then(function(result) {
        return $33d39870832a6ed4beee738c5cfffb8b$var$expectsError.apply(void 0, [
            rejects,
            result
        ].concat(args));
    });
};
$33d39870832a6ed4beee738c5cfffb8b$var$assert.doesNotThrow = function doesNotThrow(fn) {
    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)args[_key4 - 1] = arguments[_key4];
    $33d39870832a6ed4beee738c5cfffb8b$var$expectsNoError.apply(void 0, [
        doesNotThrow,
        $33d39870832a6ed4beee738c5cfffb8b$var$getActual(fn)
    ].concat(args));
};
$33d39870832a6ed4beee738c5cfffb8b$var$assert.doesNotReject = function doesNotReject(fn) {
    for(var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++)args[_key5 - 1] = arguments[_key5];
    return $33d39870832a6ed4beee738c5cfffb8b$var$waitForActual(fn).then(function(result) {
        return $33d39870832a6ed4beee738c5cfffb8b$var$expectsNoError.apply(void 0, [
            doesNotReject,
            result
        ].concat(args));
    });
};
$33d39870832a6ed4beee738c5cfffb8b$var$assert.ifError = function ifError(err) {
    if (err !== null && err !== undefined) {
        var message = 'ifError got unwanted exception: ';
        if ($33d39870832a6ed4beee738c5cfffb8b$var$_typeof(err) === 'object' && typeof err.message === 'string') {
            if (err.message.length === 0 && err.constructor) message += err.constructor.name;
            else message += err.message;
        } else message += $33d39870832a6ed4beee738c5cfffb8b$var$inspect(err);
        var newErr = new $33d39870832a6ed4beee738c5cfffb8b$import$364f656b2c35b446({
            actual: err,
            expected: null,
            operator: 'ifError',
            message: message,
            stackStartFn: ifError
        }); // Make sure we actually have a stack trace!
        var origStack = err.stack;
        if (typeof origStack === 'string') {
            // This will remove any duplicated frames from the error frames taken
            // from within `ifError` and add the original error frames to the newly
            // created ones.
            var tmp2 = origStack.split('\n');
            tmp2.shift(); // Filter all frames existing in err.stack.
            var tmp1 = newErr.stack.split('\n');
            for(var i = 0; i < tmp2.length; i++){
                // Find the first occurrence of the frame.
                var pos = tmp1.indexOf(tmp2[i]);
                if (pos !== -1) {
                    // Only keep new frames.
                    tmp1 = tmp1.slice(0, pos);
                    break;
                }
            }
            newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
        }
        throw newErr;
    }
}; // Expose a strict only variant of assert
function $33d39870832a6ed4beee738c5cfffb8b$var$strict() {
    for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)args[_key6] = arguments[_key6];
    $33d39870832a6ed4beee738c5cfffb8b$var$innerOk.apply(void 0, [
        $33d39870832a6ed4beee738c5cfffb8b$var$strict,
        args.length
    ].concat(args));
}
$33d39870832a6ed4beee738c5cfffb8b$var$assert.strict = $33d39870832a6ed4beee738c5cfffb8b$var$objectAssign($33d39870832a6ed4beee738c5cfffb8b$var$strict, $33d39870832a6ed4beee738c5cfffb8b$var$assert, {
    equal: $33d39870832a6ed4beee738c5cfffb8b$var$assert.strictEqual,
    deepEqual: $33d39870832a6ed4beee738c5cfffb8b$var$assert.deepStrictEqual,
    notEqual: $33d39870832a6ed4beee738c5cfffb8b$var$assert.notStrictEqual,
    notDeepEqual: $33d39870832a6ed4beee738c5cfffb8b$var$assert.notDeepStrictEqual
});
$33d39870832a6ed4beee738c5cfffb8b$var$assert.strict.strict = $33d39870832a6ed4beee738c5cfffb8b$var$assert.strict;
