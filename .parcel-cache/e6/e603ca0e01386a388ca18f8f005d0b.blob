'use strict';
// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var $9f7e33d23996c966938ae57afe992bed$var$maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var $9f7e33d23996c966938ae57afe992bed$var$base = 36;
var $9f7e33d23996c966938ae57afe992bed$var$tMin = 1;
var $9f7e33d23996c966938ae57afe992bed$var$tMax = 26;
var $9f7e33d23996c966938ae57afe992bed$var$skew = 38;
var $9f7e33d23996c966938ae57afe992bed$var$damp = 700;
var $9f7e33d23996c966938ae57afe992bed$var$initialBias = 72;
var $9f7e33d23996c966938ae57afe992bed$var$initialN = 128; // 0x80
var $9f7e33d23996c966938ae57afe992bed$var$delimiter = '-'; // '\x2D'
var $9f7e33d23996c966938ae57afe992bed$var$regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var $9f7e33d23996c966938ae57afe992bed$var$regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var $9f7e33d23996c966938ae57afe992bed$var$OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var $9f7e33d23996c966938ae57afe992bed$var$baseMinusTMin = $9f7e33d23996c966938ae57afe992bed$var$base - $9f7e33d23996c966938ae57afe992bed$var$tMin;
var $9f7e33d23996c966938ae57afe992bed$var$floor = Math.floor;
var $9f7e33d23996c966938ae57afe992bed$var$stringFromCharCode = String.fromCharCode;
/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */ var $9f7e33d23996c966938ae57afe992bed$var$ucs2decode = function(string) {
    var output = [];
    var counter = 0;
    var length = string.length;
    while(counter < length){
        var value = string.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
            // It's a high surrogate, and there is a next character.
            var extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            else {
                // It's an unmatched surrogate; only append this code unit, in case the
                // next code unit is the high surrogate of a surrogate pair.
                output.push(value);
                counter--;
            }
        } else output.push(value);
    }
    return output;
};
/**
 * Converts a digit/integer into a basic code point.
 */ var $9f7e33d23996c966938ae57afe992bed$var$digitToBasic = function(digit) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26);
};
/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */ var $9f7e33d23996c966938ae57afe992bed$var$adapt = function(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? $9f7e33d23996c966938ae57afe992bed$var$floor(delta / $9f7e33d23996c966938ae57afe992bed$var$damp) : delta >> 1;
    delta += $9f7e33d23996c966938ae57afe992bed$var$floor(delta / numPoints);
    for(; delta > $9f7e33d23996c966938ae57afe992bed$var$baseMinusTMin * $9f7e33d23996c966938ae57afe992bed$var$tMax >> 1; k += $9f7e33d23996c966938ae57afe992bed$var$base)delta = $9f7e33d23996c966938ae57afe992bed$var$floor(delta / $9f7e33d23996c966938ae57afe992bed$var$baseMinusTMin);
    return $9f7e33d23996c966938ae57afe992bed$var$floor(k + ($9f7e33d23996c966938ae57afe992bed$var$baseMinusTMin + 1) * delta / (delta + $9f7e33d23996c966938ae57afe992bed$var$skew));
};
/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */ // eslint-disable-next-line max-statements -- TODO
var $9f7e33d23996c966938ae57afe992bed$var$encode = function(input) {
    var output = [];
    // Convert the input in UCS-2 to an array of Unicode code points.
    input = $9f7e33d23996c966938ae57afe992bed$var$ucs2decode(input);
    // Cache the length.
    var inputLength = input.length;
    // Initialize the state.
    var n = $9f7e33d23996c966938ae57afe992bed$var$initialN;
    var delta = 0;
    var bias = $9f7e33d23996c966938ae57afe992bed$var$initialBias;
    var i, currentValue;
    // Handle the basic code points.
    for(i = 0; i < input.length; i++){
        currentValue = input[i];
        if (currentValue < 128) output.push($9f7e33d23996c966938ae57afe992bed$var$stringFromCharCode(currentValue));
    }
    var basicLength = output.length; // number of basic code points.
    var handledCPCount = basicLength; // number of code points that have been handled;
    // Finish the basic string with a delimiter unless it's empty.
    if (basicLength) output.push($9f7e33d23996c966938ae57afe992bed$var$delimiter);
    // Main encoding loop:
    while(handledCPCount < inputLength){
        // All non-basic code points < n have been handled already. Find the next larger one:
        var m = $9f7e33d23996c966938ae57afe992bed$var$maxInt;
        for(i = 0; i < input.length; i++){
            currentValue = input[i];
            if (currentValue >= n && currentValue < m) m = currentValue;
        }
        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
        var handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > $9f7e33d23996c966938ae57afe992bed$var$floor(($9f7e33d23996c966938ae57afe992bed$var$maxInt - delta) / handledCPCountPlusOne)) throw RangeError($9f7e33d23996c966938ae57afe992bed$var$OVERFLOW_ERROR);
        delta += (m - n) * handledCPCountPlusOne;
        n = m;
        for(i = 0; i < input.length; i++){
            currentValue = input[i];
            if (currentValue < n && (++delta) > $9f7e33d23996c966938ae57afe992bed$var$maxInt) throw RangeError($9f7e33d23996c966938ae57afe992bed$var$OVERFLOW_ERROR);
            if (currentValue == n) {
                // Represent delta as a generalized variable-length integer.
                var q = delta;
                for(var k = $9f7e33d23996c966938ae57afe992bed$var$base;; k += $9f7e33d23996c966938ae57afe992bed$var$base){
                    var t = k <= bias ? $9f7e33d23996c966938ae57afe992bed$var$tMin : k >= bias + $9f7e33d23996c966938ae57afe992bed$var$tMax ? $9f7e33d23996c966938ae57afe992bed$var$tMax : k - bias;
                    if (q < t) break;
                    var qMinusT = q - t;
                    var baseMinusT = $9f7e33d23996c966938ae57afe992bed$var$base - t;
                    output.push($9f7e33d23996c966938ae57afe992bed$var$stringFromCharCode($9f7e33d23996c966938ae57afe992bed$var$digitToBasic(t + qMinusT % baseMinusT)));
                    q = $9f7e33d23996c966938ae57afe992bed$var$floor(qMinusT / baseMinusT);
                }
                output.push($9f7e33d23996c966938ae57afe992bed$var$stringFromCharCode($9f7e33d23996c966938ae57afe992bed$var$digitToBasic(q)));
                bias = $9f7e33d23996c966938ae57afe992bed$var$adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
            }
        }
        ++delta;
        ++n;
    }
    return output.join('');
};
$9f7e33d23996c966938ae57afe992bed$exports = function(input) {
    var encoded = [];
    var labels = input.toLowerCase().replace($9f7e33d23996c966938ae57afe992bed$var$regexSeparators, '\u002E').split('.');
    var i, label;
    for(i = 0; i < labels.length; i++){
        label = labels[i];
        encoded.push($9f7e33d23996c966938ae57afe992bed$var$regexNonASCII.test(label) ? 'xn--' + $9f7e33d23996c966938ae57afe992bed$var$encode(label) : label);
    }
    return encoded.join('.');
};
