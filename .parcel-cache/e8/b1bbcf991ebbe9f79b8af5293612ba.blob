'use strict';
function $8cb108ca2f4d3674d2c72ab082ef7370$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $8cb108ca2f4d3674d2c72ab082ef7370$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) $8cb108ca2f4d3674d2c72ab082ef7370$var$ownKeys(Object(source), true).forEach(function(key) {
            $8cb108ca2f4d3674d2c72ab082ef7370$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $8cb108ca2f4d3674d2c72ab082ef7370$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $8cb108ca2f4d3674d2c72ab082ef7370$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $8cb108ca2f4d3674d2c72ab082ef7370$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $8cb108ca2f4d3674d2c72ab082ef7370$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $8cb108ca2f4d3674d2c72ab082ef7370$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $8cb108ca2f4d3674d2c72ab082ef7370$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $8cb108ca2f4d3674d2c72ab082ef7370$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}
import   "8cb108ca2f4d3674d2c72ab082ef7370:buffer";
var $8cb108ca2f4d3674d2c72ab082ef7370$var$Buffer = $8cb108ca2f4d3674d2c72ab082ef7370$import$14e1765886db335a$74954538e33d2f49;
import   "8cb108ca2f4d3674d2c72ab082ef7370:util";
var $8cb108ca2f4d3674d2c72ab082ef7370$var$inspect = $8cb108ca2f4d3674d2c72ab082ef7370$import$321a875a76c72525$f68a7c3078a08370;
var $8cb108ca2f4d3674d2c72ab082ef7370$var$custom = $8cb108ca2f4d3674d2c72ab082ef7370$var$inspect && $8cb108ca2f4d3674d2c72ab082ef7370$var$inspect.custom || 'inspect';
function $8cb108ca2f4d3674d2c72ab082ef7370$var$copyBuffer(src, target, offset) {
    $8cb108ca2f4d3674d2c72ab082ef7370$var$Buffer.prototype.copy.call(src, target, offset);
}
$8cb108ca2f4d3674d2c72ab082ef7370$exports = /*#__PURE__*/ (function() {
    function BufferList() {
        $8cb108ca2f4d3674d2c72ab082ef7370$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $8cb108ca2f4d3674d2c72ab082ef7370$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $8cb108ca2f4d3674d2c72ab082ef7370$var$Buffer.alloc(0);
                var ret = $8cb108ca2f4d3674d2c72ab082ef7370$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $8cb108ca2f4d3674d2c72ab082ef7370$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $8cb108ca2f4d3674d2c72ab082ef7370$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: $8cb108ca2f4d3674d2c72ab082ef7370$var$custom,
            value: function value(_, options) {
                return $8cb108ca2f4d3674d2c72ab082ef7370$var$inspect(this, $8cb108ca2f4d3674d2c72ab082ef7370$var$_objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();
